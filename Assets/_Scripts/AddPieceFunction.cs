using System;
using UnityEngine;

public class AddPieceFunction : MonoBehaviour
{
    //絶対に必要なのは駒ごとの移動可能座標と、足し算を行う処理、そして方角の判断、Animationを繰り返し再生するint型、移動した先で敵のマスを検知したらそこから先のマスは表示しないようにする処理、そしてそのマスにいる駒はハイライトさせる処理・カーソルを合わせると赤色のタイルが表示される処理、移動した後に深緑のタイルが設定されるようにする
    //Pone の動き（斜め前攻撃、　※最初のみ二回行動、アンパッサン（2歩進んだ直後のポーンの後ろのマスに自身のポーンの攻撃範囲が充てられている場合、そこに移動し相手のポーンを取ってしまうことができる））→ Colliderを残す形でアンパッサンを実装する → 他の特殊ルール的にも「初回の動きであるか否か」のbool型は必要かも
    //キャスリング（条件：キングが一度も動いていない、ルークが一度も動いていない、キングとルークの間に駒がない、チェックされていない、キングの両隣が攻撃範囲に入っていない　効果：キングはルークがいる方向に２マス進み、ルークはキングを飛び越えてひとつ目のマスに移動する）
    //右側にキャスリングすることを「ショートキャスリング」、左側にキャスリングすることを「ロングキャスリング」と呼ぶ →　この２つの動きは固定のようだ
    //プロモーション（条件：ポーンが突き当りのマスに到着した時、キング・ポーン以外の好きな駒に変化することができる）
    //ステイルメイト（効果；チェックがかかっていない状態で何かの駒を動かすと敗北が決まってしまうという時、試合結果はドローになる）
    //ドロー（条件：キング対キングになること、ステイルメイト、3回同一局面、50回ポーンが動かずどの駒も取られていない、合意によるドロー）
    public PieceParameter UpdatePoneGroup(PieceParameter param)
    {
        param.AttackAreaPositions = () => new Vector3Int[1]{ new Vector3Int(-1, 1, 0)};
        return param;
    }
    public PieceParameter AddPoneMoveCount(PieceParameter param)
    {
        param.MoveCount = () => 2;
        return param;
    }
}
